{"ast":null,"code":"var _jsxFileName = \"/Users/leehyoeun/Documents/\\u1100\\u1169\\u1109\\u1173\\u1110\\u1173\\u1107\\u1166\\u110B\\u1175\\u110F\\u1165\\u1105\\u1175/ghostbakery-react/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    // 쿠키에서 인증 상태 확인\n    const checkAuthStatus = () => {\n      const cookies = document.cookie.split(';');\n      const authCookie = cookies.find(cookie => cookie.trim().startsWith('gb_auth='));\n      if (authCookie && authCookie.includes('ok')) {\n        setIsAuthenticated(true);\n      }\n      setIsLoading(false);\n    };\n    checkAuthStatus();\n  }, []);\n  const login = async password => {\n    try {\n      const response = await fetch('/.netlify/functions/verify-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          password\n        })\n      });\n      const result = process.env.NODE_ENV === 'development' ? {\n        success: true\n      } // 개발 환경\n      : await response.json(); // 운영 환경\n\n      if (result.success) {\n        setIsAuthenticated(true);\n        return {\n          success: true\n        };\n      } else {\n        return {\n          success: false,\n          error: result.error || '비밀번호가 틀렸습니다.'\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: '서버 오류가 발생했습니다.'\n      };\n    }\n  };\n  const logout = () => {\n    // 쿠키 삭제\n    document.cookie = 'gb_auth=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';\n    setIsAuthenticated(false);\n  };\n  const value = {\n    isAuthenticated,\n    isLoading,\n    login,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"QGOAXroSjAVQAlauW9LqDUcn+wM=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","checkAuthStatus","cookies","document","cookie","split","authCookie","find","trim","startsWith","includes","login","password","response","fetch","method","headers","credentials","body","JSON","stringify","result","process","env","NODE_ENV","success","json","error","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/leehyoeun/Documents/고스트베이커리/ghostbakery-react/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // 쿠키에서 인증 상태 확인\n    const checkAuthStatus = () => {\n      const cookies = document.cookie.split(';');\n      const authCookie = cookies.find(cookie => \n        cookie.trim().startsWith('gb_auth=')\n      );\n      \n      if (authCookie && authCookie.includes('ok')) {\n        setIsAuthenticated(true);\n      }\n      setIsLoading(false);\n    };\n\n    checkAuthStatus();\n  }, []);\n\n  const login = async (password) => {\n    try {\n      const response = await fetch('/.netlify/functions/verify-password', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify({ password }),\n      });\n\n      const result = process.env.NODE_ENV === 'development' \n        ? {success: true} // 개발 환경\n        : await response.json(); // 운영 환경\n\n      if (result.success) {\n        setIsAuthenticated(true);\n        return { success: true };\n      } else {\n        return { success: false, error: result.error || '비밀번호가 틀렸습니다.' };\n      }\n    } catch (error) {\n      return { success: false, error: '서버 오류가 발생했습니다.' };\n    }\n  };\n\n  const logout = () => {\n    // 쿠키 삭제\n    document.cookie = 'gb_auth=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';\n    setIsAuthenticated(false);\n  };\n\n  const value = {\n    isAuthenticated,\n    isLoading,\n    login,\n    logout,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}